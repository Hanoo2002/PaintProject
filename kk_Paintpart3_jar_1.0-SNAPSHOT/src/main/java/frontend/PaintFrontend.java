/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package frontend;

import java.awt.Color;
import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.json.simple.JSONObject;
import shapes.AbstractShapeClass;

import org.json.simple.parser.*;
import org.json.simple.parser.ParseException;
import org.json.simple.JSONArray;
import shapes.Oval;
import shapes.Rectangle;
import shapes.StraightLine;
import shapes.Triangle;

/**
 *
 * @author ADMIN
 */
public class PaintFrontend extends javax.swing.JFrame implements Node {

    /**
     * Creates new form Frontend
     */
    private final frontend.DrawingEngine brush;
    private int rectCount = 1;
    private int triCount = 1;
    private int lineCount = 1;
    private int circleCount = 1;

    public PaintFrontend() {
        initComponents();
        this.setTitle("Vector Drawing Application");
        brush = (DrawingEngine) canvasField;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        circleButton = new javax.swing.JButton();
        lineButton = new javax.swing.JButton();
        rectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        currentShape = new javax.swing.JComboBox<>();
        colorizeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        canvasField = new DrawingShape();
        triButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        circleButton.setText("Oval");
        circleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleButtonActionPerformed(evt);
            }
        });

        lineButton.setText("Line segment");
        lineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineButtonActionPerformed(evt);
            }
        });

        rectButton.setText("Rectangle");
        rectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel1.setText("Select Shape");

        currentShape.setBackground(new java.awt.Color(242, 242, 242));
        currentShape.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        currentShape.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose shape" }));

        colorizeButton.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        colorizeButton.setText("Colorize");
        colorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        canvasField.setBackground(new java.awt.Color(255, 255, 255));
        canvasField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        canvasField.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                canvasFieldMouseDragged(evt);
            }
        });
        canvasField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                canvasFieldMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasFieldMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout canvasFieldLayout = new javax.swing.GroupLayout(canvasField);
        canvasField.setLayout(canvasFieldLayout);
        canvasFieldLayout.setHorizontalGroup(
            canvasFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 699, Short.MAX_VALUE)
        );
        canvasFieldLayout.setVerticalGroup(
            canvasFieldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 389, Short.MAX_VALUE)
        );

        triButton.setText("Triangle");
        triButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton1.setText("Copy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Save As");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Load");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentShape, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(rectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(triButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(canvasField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(circleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(triButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentShape, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                            .addComponent(colorizeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(canvasField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineButtonActionPerformed
        AddLine window = new AddLine();
        window.setParentNode(this);
        this.setVisible(false);
        window.setVisible(true);
    }//GEN-LAST:event_lineButtonActionPerformed

    private void circleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleButtonActionPerformed
        AddCircle window = new AddCircle();
        window.setParentNode(this);
        this.setVisible(false);
        window.setVisible(true);

    }//GEN-LAST:event_circleButtonActionPerformed

    private void rectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectButtonActionPerformed
        AddRectangle window = new AddRectangle();
        window.setParentNode(this);
        this.setVisible(false);
        window.setVisible(true);

    }//GEN-LAST:event_rectButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int i = currentShape.getSelectedIndex();
        if (i != 0) {
            shapes.Shape[] allShapes = brush.getShapes();
            currentShape.removeItemAt(i);
            shapes.Shape shape = allShapes[i - 1];
            brush.removeShape(shape);
//     
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void colorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeButtonActionPerformed
        int i = currentShape.getSelectedIndex();
        if (i != 0) {
            shapes.Shape[] allShapes = brush.getShapes();
            shapes.Shape shape = allShapes[i - 1];

            if (shape instanceof shapes.StraightLine) {
                Color shapeColor = Helpers.launchColorPanel("Select Shape Color");
                shape.setColor(shapeColor);
                brush.refresh(null);
            } else {
                Color shapeColor = Helpers.launchColorPanel("Select Border Color");
                shape.setColor(shapeColor);
                Color fillColor = Helpers.launchColorPanel("Select Fill Color");
                shape.setFillColor(fillColor);
                brush.refresh(null);
            }

        }


    }//GEN-LAST:event_colorizeButtonActionPerformed

    private void canvasFieldMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasFieldMouseDragged
        // TODO add your handling code here:


    }//GEN-LAST:event_canvasFieldMouseDragged

    private void triButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triButtonActionPerformed
        AddTriangle window = new AddTriangle();
        window.setParentNode(this);
        this.setVisible(false);
        window.setVisible(true);
    }//GEN-LAST:event_triButtonActionPerformed

    private void canvasFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasFieldMouseClicked
        shapes.AbstractShapeClass shape;

        shapes.Shape[] allShapes = brush.getShapes();
        for (int i = 0; i < allShapes.length; i++) {
            ///System.out.println(allShapes[i]);
            shape = (AbstractShapeClass) allShapes[i];
            if (shape.contains(evt.getPoint())) {
                currentShape.setSelectedIndex(i + 1);
                break;
            }
            if (i == allShapes.length - 1) {
                currentShape.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_canvasFieldMouseClicked

    private void canvasFieldMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasFieldMousePressed
        shapes.AbstractShapeClass shape;

        shapes.Shape[] allShapes = brush.getShapes();
        for (int i = 0; i < allShapes.length; i++) {
            System.out.println(allShapes[i]);
            shape = (AbstractShapeClass) allShapes[i];
            if (shape.contains(evt.getPoint())) {
                currentShape.setSelectedIndex(i + 1);
                break;
            }
            if (i == allShapes.length - 1)
                currentShape.setSelectedIndex(0);
    }//GEN-LAST:event_canvasFieldMousePressed
    }
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser fc = new JFileChooser();
        if (fc == null) {
            return;
        }
        fc.showSaveDialog(this);
        File f = fc.getSelectedFile();
        if (f == null) {
            return;
        }
        /*JSONObject xx=new JSONObject();
        xx.put("title", "hxmxgmg");
       File file=new File(f.toPath().toString());
         */
        JSONParser parser = new JSONParser();
        FileReader read;
        Jsonreadwrite save = new Jsonreadwrite(f.toPath().toString(), brush);
        rectCount = 1;
        triCount = 1;
        lineCount = 1;
        circleCount = 1;
        
       // System.out.println("***************************" + currentShape.getItemCount());
        currentShape.removeAllItems();
        currentShape.addItem("Choose Shape");
        save.read();
        shapes.Shape[] allShapes = brush.getShapes();
        for (int i = 0; i < allShapes.length; i++) {
                brush.removeShape(allShapes[i]);
            }
        
        for (int i = 0; i < allShapes.length; i++) {
            if (allShapes[i] instanceof shapes.StraightLine) {
                addToPanelandComboBox(allShapes[i], 'l');
            } else if (allShapes[i] instanceof shapes.Oval) {
                addToPanelandComboBox(allShapes[i], 'c');
            } else if (allShapes[i] instanceof shapes.Rectangle) {
                addToPanelandComboBox(allShapes[i], 'r');
            } else if (allShapes[i] instanceof shapes.Triangle) {
                addToPanelandComboBox(allShapes[i], 't');
            } else {
            }

        }
      /*  shapes.Shape[] allShapes2 = brush.getShapes();
        for (int i = 0; i < allShapes.length; i++) {
            
               System.out.println("***************************" +allShapes2[i] );
            }
*/
        /* try {
            System.out.println(f.toPath().toString());
            read = new FileReader(f.toPath().toString());
            Object obj = parser.parse(read);
            JSONArray ja = (JSONArray) obj;
            shapes.Shape[] allShapes = brush.getShapes();

            for (int i = 0; i < allShapes.length; i++) {
                brush.removeShape(allShapes[i]);
            }
            rectCount = 1;
            triCount = 1;
            lineCount = 1;
            circleCount = 1;
            System.out.println(ja.toJSONString());
            System.out.println(ja.size());
            for (int i = 0; i < ja.size(); i++) {
                JSONObject shape = new JSONObject();
                shape = (JSONObject) ja.get(i);
                String type = (String) shape.get("type");
                if (type.equalsIgnoreCase("line")) {
                    System.out.println("line");
                    long positionX = (long) shape.get("xposition1");
                    long positionY = (long) shape.get("yposition1");
                    long position2x = (long) shape.get("xposition2");
                    long position2y = (long) shape.get("yposition2");
                    Point center1 = new Point((int) positionX, (int) positionY);
                    Point center2 = new Point((int) position2x, (int) position2y);
                    shapes.StraightLine line = new shapes.StraightLine(center1, center2);
                    Color c = colorconverter(shape.get("bordercolor").toString());
                    line.setColor(c);
                    System.out.println(c);
                    Color c2 = colorconverter(shape.get("fillcolor").toString());
                    line.setFillColor(c2);
                    System.out.println(c2);
                    brush.addShape(line);
                    addToPanelandComboBox(line, 'l');

                } else if (type.equalsIgnoreCase("circle")) {
                    long positionX = (long) shape.get("xposition1");
                    long positionY = (long) shape.get("yposition1");
                    long horizontalradiusValue = (long) shape.get("horzradius");
                    long verticalradiusValue = (long) shape.get("vertradius");
                    Point center = new Point((int) positionX, (int) positionY);
                    shapes.Oval circle = new shapes.Oval(center, (int) horizontalradiusValue, (int) verticalradiusValue);
                    Color c = colorconverter(shape.get("bordercolor").toString());
                    circle.setColor(c);
                    System.out.println(shape.get("bordercolor").toString());
                    Color c2 = colorconverter(shape.get("fillcolor").toString());
                    circle.setFillColor(c2);
                    System.out.println(shape.get("fillcolor").toString());
                    brush.equals(circle);
                    addToPanelandComboBox(circle, 'c');
                } else if (type.equalsIgnoreCase("rectangle")) {
                    long positionX = (long) shape.get("xposition1");
                    long positionY = (long) shape.get("yposition1");
                    long length = (long) shape.get("length");
                    long width = (long) shape.get("width");
                    Point center = new Point((int) positionX, (int) positionY);
                    shapes.Rectangle rectangle = new shapes.Rectangle(center, (int) length, (int) width);
                    Color c = colorconverter(shape.get("bordercolor").toString());
                    rectangle.setColor(c);
                    System.out.println(c);
                    Color c2 = colorconverter(shape.get("fillcolor").toString());
                    System.out.println(c2);
                    rectangle.setFillColor(c2);
                    brush.addShape(rectangle);
                    addToPanelandComboBox(rectangle, 'r');
                } else if (type.equalsIgnoreCase("triangle")) {
                    System.out.println("triangle");
                    long position1X = (long) shape.get("xposition1");
                    long position1Y = (long) shape.get("yposition1");
                    long position2X = (long) shape.get("xposition2");
                    long position2Y = (long) shape.get("yposition2");
                    long position3X = (long) shape.get("xposition3");
                    long position3Y = (long) shape.get("yposition3");
                    Point center1 = new Point((int) position1X, (int) position1Y);
                    Point center2 = new Point((int) position2X, (int) position2Y);
                    Point center3 = new Point((int) position3X, (int) position3Y);
                    shapes.Triangle triangle = new shapes.Triangle(center1, center2, center3);
                    Color c = colorconverter(shape.get("bordercolor").toString());
                    System.out.println(shape.get("bordercolor").toString());
                    triangle.setColor(c);
                    Color c2 = colorconverter(shape.get("fillcolor").toString());
                    System.out.println(shape.get("fillcolor").toString());
                    triangle.setFillColor(c2);
                    brush.addShape(triangle);
                    addToPanelandComboBox(triangle, 't');
                } else {
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PaintFrontend.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PaintFrontend.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(PaintFrontend.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        brush.refresh(null);


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        JFileChooser fc = new JFileChooser();
        if (fc == null) {
            return;
        }

        fc.showSaveDialog(this);
        File f = fc.getSelectedFile();
        if (f == null) {
            return;
        }
        Jsonreadwrite save = new Jsonreadwrite(f.toPath().toString() + ".json", brush);
        save.save();
        /* File file = new File(f.toPath().toString() + ".json");
        try {
            FileWriter fileWriter = new FileWriter(file);
            shapes.Shape[] allShapes = brush.getShapes();
            fileWriter.write("[");
            for (int i = 0; i < allShapes.length; i++) {
                JSONObject shape = new JSONObject();
                if (allShapes[i] instanceof shapes.StraightLine) {
                    shapes.StraightLine casting = (shapes.StraightLine) allShapes[i];
                    shape.put("type", "line");
                    shape.put("xposition1", casting.getPosition().x);
                    shape.put("yposition1", casting.getPosition().y);
                    shape.put("xposition2", casting.getPosition2().x);
                    shape.put("yposition2", casting.getPosition2().y);
                    shape.put("fillcolor", casting.getFillColor().toString());
                    shape.put("bordercolor", casting.getColor().toString());
                    fileWriter.write(shape.toString());
                } else if (allShapes[i] instanceof shapes.Oval) {
                    shapes.Oval casting = (shapes.Oval) allShapes[i];
                    shape.put("type", "circle");
                    shape.put("xposition1", casting.getPosition().x);
                    shape.put("yposition1", casting.getPosition().y);
                    shape.put("horzradius", casting.getHorizontalradius());
                    shape.put("vertradius", casting.getVerticalradius());
                    shape.put("fillcolor", casting.getFillColor().toString());
                    shape.put("bordercolor", casting.getColor().toString());
                    fileWriter.write(shape.toString());
                } else if (allShapes[i] instanceof shapes.Rectangle) {
                    shapes.Rectangle casting = (shapes.Rectangle) allShapes[i];
                    shape.put("type", "rectangle");
                    shape.put("xposition1", casting.getPosition().x);
                    shape.put("yposition1", casting.getPosition().y);
                    shape.put("length", casting.getLength());
                    shape.put("width", casting.getWidth());
                    shape.put("fillcolor", casting.getFillColor().toString());
                    shape.put("bordercolor", casting.getColor().toString());
                    fileWriter.write(shape.toString());
                } else if (allShapes[i] instanceof shapes.Triangle) {

                    shapes.Triangle casting = (shapes.Triangle) allShapes[i];
                    shape.put("type", "Triangle");
                    shape.put("xposition1", casting.getPosition().x);
                    shape.put("yposition1", casting.getPosition().y);
                    shape.put("xposition2", casting.getPosition2().x);
                    shape.put("yposition2", casting.getPosition2().y);
                    shape.put("xposition3", casting.getPosition3().x);
                    shape.put("yposition3", casting.getPosition3().y);
                    shape.put("fillcolor", casting.getFillColor().toString());
                    shape.put("bordercolor", casting.getColor().toString());
                    fileWriter.write(shape.toString());
                } else {
                }
                fileWriter.write(",\n");
            }
            fileWriter.write("]");
            fileWriter.flush();
        } catch (IOException ex) {
            Logger.getLogger(PaintFrontend.class.getName()).log(Level.SEVERE, null, ex);
        }
         */
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int i = currentShape.getSelectedIndex();
        if (i != 0) {
            shapes.Shape[] allShapes = brush.getShapes();
            shapes.Shape shape = allShapes[i - 1];

            if (shape instanceof shapes.Triangle) {
                Point center2 = new Point(((Triangle) shape).getPosition2().x, ((Triangle) shape).getPosition2().y);
                Point center3 = new Point(((Triangle) shape).getPosition3().x, ((Triangle) shape).getPosition3().y);
                Triangle t = new Triangle(shape.getPosition(), center2, center3);
                t.setColor(shape.getColor());
                t.setFillColor(shape.getFillColor());
                addToPanelandComboBox(t, 't');

            } else if (shape instanceof shapes.Rectangle) {
                Rectangle r = new Rectangle(shape.getPosition(), ((Rectangle) shape).getLength(), ((Rectangle) shape).getWidth());
                r.setColor(shape.getColor());
                r.setFillColor(shape.getFillColor());
                addToPanelandComboBox(r, 'r');

            } else if (shape instanceof shapes.Oval) {
                Oval c = new Oval(shape.getPosition(), ((Oval) shape).getHorizontalradius(), ((Oval) shape).getVerticalradius());
                c.setColor(shape.getColor());
                c.setFillColor(shape.getFillColor());
                addToPanelandComboBox(c, 'c');

            } else if (shape instanceof shapes.StraightLine) {
                Point center2 = new Point(((StraightLine) shape).getPosition2().x, ((StraightLine) shape).getPosition2().y);
                StraightLine l = new StraightLine(shape.getPosition(), center2);
                l.setColor(shape.getColor());
                l.setFillColor(shape.getFillColor());
                addToPanelandComboBox(l, 'l');

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void addToPanelandComboBox(shapes.Shape shape, char type) {
        brush.addShape(shape);
        brush.refresh(null);
        switch (type) {
            case 'c':
                currentShape.addItem("circle_" + circleCount);
                circleCount++;
                break;
            case 'l':
                currentShape.addItem("line_" + lineCount);
                lineCount++;
                break;
            case 't':
                currentShape.addItem("tri_" + triCount);
                triCount++;
                break;
            case 'r':
                currentShape.addItem("rect_" + rectCount);
                rectCount++;
                break;

        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaintFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaintFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaintFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaintFrontend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaintFrontend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvasField;
    private javax.swing.JButton circleButton;
    private javax.swing.JButton colorizeButton;
    private javax.swing.JComboBox<String> currentShape;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JButton lineButton;
    private javax.swing.JButton rectButton;
    private javax.swing.JButton triButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void setParentNode(Node parent) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
